{{ for typ in (*types).iter() {
    let t = util::to_upper(&typ.typename); 
}} 

/*
 * Parser function for Type  {{= typ.typename }}
 */
 {{= typ.typename }}* sj_parse_ {{= util::ucamel_to_lsnake(&typ.typename) 
}}(int *pos, int length, char *txt) {
    Sj {{= typ.typename }}StateEnum state;
    state = SJ_ {{= t }}_INITIAL;
     {{= typ.typename }} * {{= util::to_lower(&typ.typename) }};
     {{= util::to_lower(&typ.typename) }} = ( {{= typ.typename }}*)malloc(sizeof( {{= typ.typename }}*));
    char c = 0; // for current character
    SjBuffer *buf;
    buf = sj_buffer_new();

    while((*pos) < length && state != SJ_ {{= t }}_FINAL) {        
        c = txt[*pos];        
        (*pos) += 1;
        // TODO: Parse content of obj from txt
{{+ jsoninc_template/parser/parserswitchcase.ct }} 
    }    
    
    return  {{= util::to_lower(&typ.typename) }};
}
{{ } }}