{{ // Template for generation of swift based json parsers
use model;
use filehandler;
use util;

// 
// This generat Method is the entry point of code generation
//
pub fn generate(types:&Box<Vec<Box<model::Type>>>, folder:&str) { 
  // generate Classes
  for typ in (*types).iter() {
    let result = gen_type(typ);
    let filename = format!("{}/{}.swift", folder, typ.typename);
    filehandler::write_file(filename, result);
  }
  // generate Parser and Stringifier
}

// Generate single types of the data model
fn gen_type(typ:&Box<model::Type>) -> String {
  let mut str:String = String::new(); 
}}//
//  {{= typ.typename }}.swift
// 

import Foundation

//
// Datastructure for  {{= typ.typename }}
//
public struct  {{= typ.typename }} {
{{+ ./swift_template/struct_template.ct }}
{{+ ./swift_template/enum_template.ct }}

  //
  // Parsing-Function for type  {{= typ.typename }}
  //
  public static func parse(code:String) ->  {{= typ.typename }} {
    var ptr = indices(code).generate();
    return parse_internal(code, ptr:&ptr);
  }

  //
  // Internal parsing function, directly called by same classes parse function
  // and any other class which has nested objects of this type.
  // 
  public static func parse_internal(code:String, inout ptr:RangeGenerator<String.Index>) ->  {{= typ.typename }} {
    var obj: {{= typ.typename }} =  {{= typ.typename }}();
    var c:Character = " ";
    var charbefore:Character = " ";
    var buf = "";
    var state =  {{= typ.typename }}ParserState.INITIAL;

    while ptr.startIndex < ptr.endIndex && state !=  {{= typ.typename }}ParserState.FINAL {
      c = code[ptr.startIndex];
      switch state {
        // static part of parsers automaton
{{+ ./swift_template/parser_default_statehandlers.ct }}
        // attribute dependent part of parsers automaton
{{+ ./swift_template/parser_attribute_statehandlers.ct }}
        default:
          // This state is not allwoed to be reached
          println("ERROR: ENCOUNTERED INVALID STATE");
      }
      charbefore = c;
      ptr.next();
    }

    validate_mandatory(obj);

    return obj;
  }

{{+ ./swift_template/validate_mandatory.ct }}

{{+ ./swift_template/raise_error.ct }}

{{+ ./swift_template/serialize_function.ct }}
}

{{   return str;
} 

{{+ ./swift_template/translate_basic_type_function.ct }}
{{+ ./swift_template/init_basic_type_function.ct }}

}}
