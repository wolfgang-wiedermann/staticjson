{{ } else if attr.attribute_type == "string"
        || attr.attribute_type == "char" { }}
        // Strings and other values enclosed by "
        case .IN_ {{= util::to_upper(&attr.name) }}_VALUE:
          if c == "\"" {
            state =  {{= typ.typename }}ParserState.IN_ {{= util::to_upper(&attr.name) }}_STRING;
            buf = "";
          } else if !is_blank(c) {
            // TODO: Handle syntax error
          }
        case .IN_ {{= util::to_upper(&attr.name) }}_STRING:
          if c == "\"" && charbefore != "\\" {
{{ if attr.is_array == true && (
      attr.attribute_type == "string"
      || attr.attribute_type == "char"
      || attr.attribute_type == "date"
      || attr.attribute_type == "time"
      || attr.attribute_type == "datetime") { }}
            state =  {{= typ.typename }}ParserState.IN_ {{= util::to_upper(&attr.name) }}_ARRAY;
{{ } else { }}
            state =  {{= typ.typename }}ParserState.BEHIND_FIELDVALUE;
{{ } }}
{{ if attr.is_array == true && attr.is_param_value_present("mandatory", "true") { }}
            obj. {{= attr.name }}.append(buf);
{{ } else if attr.is_array == true { }}
            if let x = obj. {{= attr.name }} {
                obj. {{= attr.name }}!.append(buf);
            } else {
                if obj. {{= attr.name }} != nil { 
                    obj. {{= attr.name }} = [];
                }
                obj. {{= attr.name }}!.append(buf);
            }
{{ } else { }}
            obj. {{= attr.name }} = buf;
{{ } }}
            buf = "";
          } else {
            buf.append(c);
          }