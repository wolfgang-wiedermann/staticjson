        case .INITIAL: 
          if c == "{" {
            state =  {{= typ.typename }}ParserState.INOBJECT;
          } else if !is_blank(c) {
            // TODO: Handle syntax error
            raise_error("Invalid character found at ...", c:c);
          }
        case .INOBJECT:
          if c == "\"" {
            state =  {{= typ.typename }}ParserState.IN_FIELDNAME;
            buf = "";
          } else if !is_blank(c) {
            // TODO: Handle syntax error
            raise_error("Invalid character found at ...", c:c);
          }
        case .IN_FIELDNAME:
          if c == "\"" && charbefore != "\\" {
            state =  {{= typ.typename }}ParserState.BEHIND_FIELDNAME;
          } else {
            buf.append(c);
          }
        case .BEHIND_FIELDNAME:
          if c == ":" {
            if buf == "" {
              // TODO: Handle syntax error, empty names are not allowed
{{ for attr in typ.attributes.iter() { }}
            } else if buf == " {{= attr.name}}" {
{{ if !model::Type::is_basic_type(&attr.attribute_type) { }}
              state =  {{= typ.typename }}ParserState.IN_ {{= util::to_upper(&attr.name) }}_OBJECT;
{{ } else if attr.is_array == true { }}
              state =  {{= typ.typename }}ParserState.IN_ {{= util::to_upper(&attr.name) }}_ARRAY;
{{ } else { }}
              state =  {{= typ.typename }}ParserState.IN_ {{= util::to_upper(&attr.name) }}_VALUE;
{{ } 
} }}
            }
            // TODO: if Strict-Mode then else with error output
            // TODO: if flex-Mode then do something to overjump unknown attributes
            buf = "";
          } else if !is_blank(c) {
            // TODO: Handle syntax error
            raise_error("Invalid character found at ...", c:c);
          }
        case .BEHIND_FIELDVALUE:
          if c == "," {
            state =  {{= typ.typename }}ParserState.INOBJECT;
          } else if c == "}" {
            state =  {{= typ.typename }}ParserState.FINAL;
          } else if !is_blank(c) {
            // TODO: Handle syntax error
            raise_error("Invalid character found at ...", c:c);
          }
        case .BEHIND_ARRAY:
          if c == "," {
            state =  {{= typ.typename }}ParserState.INOBJECT;
          } else if c == "}" {
            state =  {{= typ.typename }}ParserState.FINAL;
          } else if !is_blank(c) {
            // TODO: Handle syntax error
            raise_error("Invalid character found at ...", c:c);
          }
