  //
  // Function to serialize objects of type  {{= typ.typename }}
  //
  public static func serialize(obj: {{= typ.typename }}) -> String {
    var idx = 0;
    var max_idx = 0;
    var buf = "{";
{{ let mut r_idx = 0;
let mut r_max_idx = typ.attributes.len();
for attr in typ.attributes.iter() {
  r_idx += 1; }}
{{ if !attr.is_param_value_present("mandatory", "true") { }}
    if obj. {{= attr.name }} != nil {
{{ } }}
    buf += "\"";
    buf += " {{= attr.name }}";
    buf += "\":";
{{   if attr.is_array {  }}
      buf += "[";
      idx = 0;
      max_idx = obj. {{= attr.name }}.count;
      for val in obj. {{= attr.name }} {
        idx++;
{{       if attr.attribute_type == "string"
         || attr.attribute_type == "date"
         || attr.attribute_type == "datetime"
         || attr.attribute_type == "time"  { }}
        buf += "\"";
        buf += "\(val)";
        buf += "\"";
{{       } else if !model::Type::is_basic_type(&attr.attribute_type) { }}
        buf +=  {{= attr.attribute_type }}.serialize(val);
{{       } else { }} 
        buf += "\(val)";
{{       } }}
        if idx < max_idx {
          buf += ", ";
        }
      }
      buf += "]";
{{   } else if attr.attribute_type == "string"
     || attr.attribute_type == "date"
     || attr.attribute_type == "datetime"
     || attr.attribute_type == "time" {  }}
    buf += "\"";
    buf += "\(obj. {{= attr.name}})";
    buf += "\"";
{{   } else if !model::Type::is_basic_type(&attr.attribute_type) { }}
    buf +=  {{= attr.attribute_type }}.serialize(obj. {{= attr.name }});
{{   } else { }}
    buf += "\(obj. {{= attr.name }})";
{{   } }}
{{ if r_idx < r_max_idx { }}
    buf += ", ";
{{  } }}
{{ if !attr.is_param_value_present("mandatory", "true") { }}
     }
{{ } 
} }}
    buf += "}";
    return buf;
  }
