{{ // 
// Generate code for type
// For details about entity frameworks attributes see https://msdn.microsoft.com/en-us/data/jj591583
//
fn gen_type(typ:&Box<model::Type>, result:model::ParserResult) -> String {
  let mut str:String = String::new(); 
}}  
using System;
using System.Collections.Generic;
using System.Linq; 
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema; {{ if typ.is_param_present("cs-data-contract") || typ.is_attribute_param_present("cs-data-contract") { }}
using System.Runtime.Serialization; {{ } }}

{{= get_types_referenced_dotnet_namespaces(&typ, result.types.clone()) }}

{{   if typ.is_param_present("cs-namespace") {
}}namespace  {{= typ.get_param_value("cs-namespace") }} 
{ {{ } }}

///
/// Generated Type for Entity  {{= typ.typename }} 
///
{{ if typ.is_param_present("ef-table") { }}
[Table(" {{= typ.get_param_value("ef-table") }}")] {{ } if typ.is_param_value_present("cs-data-contract", "true") { }}
[DataContract] {{ } }}
public class  {{= typ.typename }} {

    #region properties
{{     for attribut in typ.attributes.iter() { 
         if attribut.is_param_value_present("ef-id", "true") { }}
    [Key] {{ } if attribut.is_param_value_present("ef-id", "true") { }}
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)] {{ } if attribut.is_param_value_present("cs-data-contract", "true") { }}
    [DataMember] {{ } }}
    public  {{= get_dotnet_type(&attribut.attribute_type, attribut.is_array) }}  {{= util::lsnake_to_ucamel(&attribut.name) }} { get; set; }   

{{     } }}
    #endregion

    public  {{= typ.typename }}() {
{{     for attribut in typ.attributes.iter() {
         // println!("{} -> {}", attribut.attribute_type, result.is_defined_typename(&attribut.attribute_type));
         if result.is_defined_typename(&attribut.attribute_type) 
            || model::Type::is_basic_type(&attribut.attribute_type) {  }}
        this. {{= util::lsnake_to_ucamel(&attribut.name) }} =  {{= get_dotnet_type_initial(&attribut.attribute_type, attribut.is_array) }};
{{         } }}        
{{     } }}
    }

    ///
    /// The function IsValid offert a validation function for the
    /// mandatory attributes and other constraints of staticjson code
    /// <param name="obj">object to check</param>
    /// <returns>check result as bool</returns>
    ///
    public static bool IsValid( {{= typ.typename }} obj) {
        return obj != null {{     for attribut in typ.attributes.iter() { 
      if attribut.is_param_value_present("mandatory", "true") { }}
        && obj. {{= util::lsnake_to_ucamel(&attribut.name) }} !=  {{= get_dotnet_type_initial(&attribut.attribute_type, attribut.is_array) }}
{{       } if attribut.is_param_present("maxlen") && attribut.attribute_type == "string" && !attribut.is_array { }}
        && (obj. {{= util::lsnake_to_ucamel(&attribut.name) }} != null && 
            obj. {{= util::lsnake_to_ucamel(&attribut.name) }}.Length <=  {{= attribut.get_param_value("maxlen") }})
{{       } if attribut.is_param_present("minlen") && attribut.attribute_type == "string" && !attribut.is_array { }}
        && (obj. {{= util::lsnake_to_ucamel(&attribut.name) }} != null && 
            obj. {{= util::lsnake_to_ucamel(&attribut.name) }}.Length >=  {{= attribut.get_param_value("minlen") }})
{{       } 
    } }};
    }
}

{{   if typ.is_param_present("cs-namespace") {
}} 
} {{ }
    return str;
} 

}}