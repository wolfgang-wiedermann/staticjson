{{ use model;
use filehandler;
use util;
use std::collections::HashSet;

//
// This generate Method is the entry point to generation
// of jquery proxies for the given interfaces and types
//
pub fn generate(tree:model::ParserResult, folder:&str) {
  
  for ifa in tree.interfaces.iter() {
    let result = gen_proxy(ifa, tree.types.clone());
    let filename = format!("{}/{}Proxy.js", folder, ifa.name);
    filehandler::write_file(filename, result);    
  }
  
} }}{{+ jquery_template/gen_proxy.ct }}{{+ jquery_template/namespace_fcts.ct }}
