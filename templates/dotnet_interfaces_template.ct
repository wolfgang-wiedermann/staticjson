{{ use model;
use filehandler;
use util;
use std::collections::HashSet;

//
// This generate Method is the entry point to generation
// of html documentation about the given types
//
pub fn generate(tree:model::ParserResult, folder:&str) {
  
  for ifa in tree.interfaces.iter() {
    let result = gen_interface(ifa, tree.types.clone());
    if ifa.is_param_present("cs-namespace") {
      if ifa.is_param_present("cs-namespace-const") {
        let package = ifa.get_param_value("cs-namespace").replace(&ifa.get_param_value("cs-namespace-const"), "").replace(".", "/");      
        let filename = format!("{}/{}/{}.cs", folder, package, ifa.name);      
        filehandler::write_file(filename, result);
      } else {
        let package = ifa.get_param_value("cs-namespace").replace(".", "/");      
        let filename = format!("{}/{}/{}.cs", folder, package, ifa.name);      
        filehandler::write_file(filename, result);
      }
    } else {
      let filename = format!("{}/{}.cs", folder, ifa.name);
      filehandler::write_file(filename, result);
    }
  }
} }}{{+ dotnet_template/gen_interface.ct }}{{+ dotnet_template/functions.ct }}