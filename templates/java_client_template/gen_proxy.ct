{{ // 
// Generate code for interface
//
fn gen_proxy(ifa:&Box<model::Interface>, types:Box<Vec<Box<model::Type>>>) -> String {
  let mut str:String = String::new();
  if ifa.is_param_present("java-package") {
}}package  {{= ifa.get_param_value("java-package") }}; {{ } }}

import java.util.ArrayList; 
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.ContentType;
import org.apache.http.impl.client.HttpClients;
import com.fasterxml.jackson.databind.ObjectMapper;
{{= get_proxies_referenced_java_packages(&ifa, types.clone()) }}

/**
* Generated Proxy for  {{= ifa.name }}
*/
public class  {{= ifa.name }}Proxy {

    // TODO: Attributes and Methods for Authentication and Connection Handling, Basepath and so on...
    private String basePath = "http://localhost:8081/TestApplication";
{{ if ifa.is_param_present("path") { }}
    private String ifaPathFragment = " {{= ifa.get_param_value("path") }}";  
{{ } else { }}
    private String ifaPathFragment = null;
{{ } }}    
    private ObjectMapper mapper = new ObjectMapper();
	private HttpClient clnt = HttpClients.createDefault();
	
	public void setBasePath(String basePath) {
		this.basePath = basePath;
	}

{{ for function in ifa.functions.iter() { }}

    /** {{ for param in function.params.iter() { }}
     * @param  {{= param.name }} {{ } }} 
     * @return  {{= get_java_type(&function.returntype, function.returntype_is_array) }}
     */ 
    public  {{= get_java_type(&function.returntype, function.returntype_is_array) }}  {{= function.name }}(
{{ let mut i = 0;
for param in function.params.iter() { 
  i = i+1;   
  if i > 1 { 
    str.push_str(", "); 
  } }} {{= get_java_type(&param.typename, param.is_array) }}  {{= param.name }} {{ } }}) { 
{{     if function.is_attribute_value_present("method", "GET") {
    str.push_str(&get_impl_for_get_function(&function)) 
  } else if function.is_attribute_value_present("method", "POST") {
    str.push_str(&get_impl_for_post_function(&function)) 
  } else if function.is_attribute_value_present("method", "PUT") {
    str.push_str(&get_impl_for_put_function(&function))
  } else if function.is_attribute_value_present("method", "DELETE") {
    str.push_str(&get_impl_for_delete_function(&function))
  } }}
    }
{{ } }}
}
{{   return str;
} 

fn get_impl_for_get_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-GET call
    	try {
	    	String path = this.basePath;
            if(this.ifaPathFragment != null) {
                path += this.ifaPathFragment;
            }
{{ if f.is_attribute_present("path") { }} 
            path += " {{= f.get_attribute_value("path") }}";
{{ } }}
{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}
	    	path = path.replaceAll("\\{ {{= param.get_param_value("path-param") }}\\}",""+ {{= param.name}});
{{     }
} }}
            URIBuilder uriBuilder = new URIBuilder(path);
{{ for param in f.params.iter() {
    if param.is_param_present("query-param") { }}
            uriBuilder.addParameter(" {{= param.get_param_value("query-param") }}",  {{= param.name }});
{{     }
} }}
	    	HttpGet get = new HttpGet(uriBuilder.build());
			HttpResponse resp;
			resp = clnt.execute(get);
			HttpEntity httpEntity = resp.getEntity();
{{ if f.returntype_is_array { }}
             {{= get_java_type(&f.returntype, f.returntype_is_array) }} lst = new  {{= get_java_type(&f.returntype, f.returntype_is_array) }}();
			 {{= get_java_type(&f.returntype, false) }}[] array = mapper.readValue(httpEntity.getContent(),  {{= get_java_type(&f.returntype, false) }}[].class);
			lst.addAll(Arrays.asList(array));
			return lst;
{{ } else { }}
			return mapper.readValue(httpEntity.getContent(),  {{= get_java_type(&f.returntype, f.returntype_is_array) }}.class);
{{ } }}
    	} catch(Exception ex) {
    		throw new RuntimeException(ex);
    	}
{{ 
  return str;
}

fn get_impl_for_post_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-POST call
        try {
	    	String path = this.basePath;
            if(this.ifaPathFragment != null) {
                path += this.ifaPathFragment;
            }
{{ if f.is_attribute_present("path") { }} 
            path += " {{= f.get_attribute_value("path") }}";
{{ } }}
{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}
	    	path = path.replaceAll("\\{ {{= param.get_param_value("path-param") }}\\}",""+ {{= param.name}});
{{     }
} }}            
            String jsonString = mapper.writeValueAsString( {{= f.get_serialized_functionparam_name() }});
            HttpPost post = new HttpPost(path);
            StringEntity request = new StringEntity(jsonString, ContentType.APPLICATION_JSON);
            post.setEntity(request);
            HttpResponse resp;
			resp = clnt.execute(post);
            post.releaseConnection();
			HttpEntity httpEntity = resp.getEntity();
{{ if f.returntype_is_array { }}
             {{= get_java_type(&f.returntype, f.returntype_is_array) }} lst = new  {{= get_java_type(&f.returntype, f.returntype_is_array) }}();
			 {{= get_java_type(&f.returntype, false) }}[] array = mapper.readValue(httpEntity.getContent(),  {{= get_java_type(&f.returntype, false) }}[].class);
			lst.addAll(Arrays.asList(array));
			return lst;
{{ } else { }}
			return mapper.readValue(httpEntity.getContent(),  {{= get_java_type(&f.returntype, f.returntype_is_array) }}.class);
{{ } }}
    	} catch(Exception ex) {
    		throw new RuntimeException(ex);
    	}
{{ 
  return str;
}

fn get_impl_for_put_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-PUT call
        try {
	    	String path = this.basePath;
            if(this.ifaPathFragment != null) {
                path += this.ifaPathFragment;
            }
{{ if f.is_attribute_present("path") { }} 
            path += " {{= f.get_attribute_value("path") }}";
{{ } }}
{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}
	    	path = path.replaceAll("\\{ {{= param.get_param_value("path-param") }}\\}",""+ {{= param.name}});
{{     }
} }}
            String jsonString = mapper.writeValueAsString( {{= f.get_serialized_functionparam_name() }});
            HttpPut put = new HttpPut(path);
            StringEntity request = new StringEntity(jsonString, ContentType.APPLICATION_JSON);
            put.setEntity(request);
            HttpResponse resp;
			resp = clnt.execute(put);
            put.releaseConnection();			
{{ if f.returntype_is_array { }}
            HttpEntity httpEntity = resp.getEntity();
             {{= get_java_type(&f.returntype, f.returntype_is_array) }} lst = new  {{= get_java_type(&f.returntype, f.returntype_is_array) }}();
			 {{= get_java_type(&f.returntype, false) }}[] array = mapper.readValue(httpEntity.getContent(),  {{= get_java_type(&f.returntype, false) }}[].class);
			lst.addAll(Arrays.asList(array));
			return lst;
{{ } else if f.returntype != "void" { }}
            HttpEntity httpEntity = resp.getEntity();
			return mapper.readValue(httpEntity.getContent(),  {{= get_java_type(&f.returntype, f.returntype_is_array) }}.class);
{{ } }}

    	} catch(Exception ex) {
    		throw new RuntimeException(ex);
    	}
{{ 
  return str;
}

fn get_impl_for_delete_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-DELETE call
        try {
	    	String path = this.basePath;
            if(this.ifaPathFragment != null) {
                path += this.ifaPathFragment;
            }
{{ if f.is_attribute_present("path") { }} 
            path += " {{= f.get_attribute_value("path") }}";
{{ } }}
{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}
	    	path = path.replaceAll("\\{ {{= param.get_param_value("path-param") }}\\}",""+ {{= param.name}});
{{     }
} }}
            //return null;
    	} catch(Exception ex) {
    		//throw new RuntimeException(ex);
    	}
        throw new RuntimeException("Method not implemented");
{{ 
  return str;
}

}}