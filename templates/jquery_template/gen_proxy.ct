{{ // 
// Generate code for interface
//
fn gen_proxy(ifa:&Box<model::Interface>, types:Box<Vec<Box<model::Type>>>) -> String {
  let mut str:String = String::new();
  if ifa.is_param_present("java-package") {
}}// TODO: Namespace anstelle von "proxy" aufbauen:  {{= ifa.get_param_value("java-package") }}; {{ } }}
var proxy = proxy || {};

/**
* Generated Proxy for  {{= ifa.name }}
*/
proxy. {{= ifa.name }}Proxy = function(urlBase) {
    var self = this;

    // URL-Basis aufbauen
    self.url = urlBase;
{{ if ifa.is_param_present("path") { }}
    self.url += " {{= ifa.get_param_value("path") }}";  
{{ } }}
    
{{ for function in ifa.functions.iter() { }}

    /** {{ for param in function.params.iter() { }}
     * @param  {{= param.name }} {{ } }} 
     * @return  {{= function.returntype }}
     */ 
    self. {{= function.name }} = function( {{ for param in function.params.iter() { }}{{= param.name }}{{ str.push_str(", ");  } }}successHandler, errorHandler) { 
{{     if function.is_attribute_value_present("method", "GET") {
    str.push_str(&get_impl_for_get_function(&function)) 
  } else if function.is_attribute_value_present("method", "POST") {
    str.push_str(&get_impl_for_post_function(&function)) 
  } else if function.is_attribute_value_present("method", "PUT") {
    str.push_str(&get_impl_for_put_function(&function))
  } else if function.is_attribute_value_present("method", "DELETE") {
    str.push_str(&get_impl_for_delete_function(&function))
  } }}
    }
{{ } }}
}
{{   return str;
} 

fn get_impl_for_get_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-GET call    
        var method = "GET";
        var queryParams = "";
{{ if f.is_attribute_present("path") { }} 
        var path = self.url + " {{= f.get_attribute_value("path") }}";
{{ } else { }}
        var path = self.url;
{{ } }}

{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}        
	    path = path.replace("{ {{= param.get_param_value("path-param") }}}", encodeURIComponent( {{= param.name}}));
{{     }
} 
  for param in f.params.iter() {
    if param.is_param_present("query-param") { }}
        if(queryParams.length > 0) {
            queryParams += "&";
        }                
        queryParams += " {{= param.get_param_value("query-param") }}=" + encodeURIComponent( {{= param.name }});            
{{     }
  }  }} 
        if(queryParams.length > 0) {
            path = path + "?" + queryParams;
        }        
        // DEBUG OUTPUT:
        console.log(method + " " + path);
        
        $.ajax({
            "url": path,
            "method": method,
            "dataType": "json",
            "success": successHandler,
            "error": errorHandler
        });
{{ 
  return str;
}

fn get_impl_for_post_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-POST call  
        var method = "POST";
{{ if f.is_attribute_present("path") { }} 
        var path = self.url + " {{= f.get_attribute_value("path") }}";
{{ } }}
{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}
            // TODO:
	    	// path = path.replaceAll("\\{ {{= param.get_param_value("path-param") }}\\}",""+ {{= param.name}});
{{     }
} 
  for param in f.params.iter() {
    if param.is_param_present("query-param") { }}
            // path.addQueryParameter(" {{= param.get_param_value("query-param") }}",  {{= param.name }});
{{     }
  }  
  return str;
}

fn get_impl_for_put_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-PUT call  
        var method = "PUT";
{{ if f.is_attribute_present("path") { }} 
        var path = self.url + " {{= f.get_attribute_value("path") }}";
{{ } }}
{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}
            // TODO:
	    	// path = path.replaceAll("\\{ {{= param.get_param_value("path-param") }}\\}",""+ {{= param.name}});
{{     }
} 
  for param in f.params.iter() {
    if param.is_param_present("query-param") { }}
            // path.addQueryParameter(" {{= param.get_param_value("query-param") }}",  {{= param.name }});
{{     }
  }  
  return str;
}

fn get_impl_for_delete_function(f:&model::Function) -> String {
  let mut str:String = String::new();
}}
        // HTTP-DELETE call    	
        var method = "DELETE";
{{ if f.is_attribute_present("path") { }} 
        var path = self.url + " {{= f.get_attribute_value("path") }}";
{{ } }}
{{ for param in f.params.iter() { 
    if param.is_param_present("path-param") { }}
            // TODO:
	    	// path = path.replaceAll("\\{ {{= param.get_param_value("path-param") }}\\}",""+ {{= param.name}});
{{     }
} 
  for param in f.params.iter() {
    if param.is_param_present("query-param") { }}
            // path.addQueryParameter(" {{= param.get_param_value("query-param") }}",  {{= param.name }});
{{     }
  }  
  return str;
}

}}