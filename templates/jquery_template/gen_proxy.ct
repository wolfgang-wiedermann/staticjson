{{ // 
// Generate code for interface
//
fn gen_proxy(ifa:&Box<model::Interface>, types:Box<Vec<Box<model::Type>>>) -> String {
  let mut str:String = String::new();  
}}// Namespace generieren

{{= buildup_js_namespace_from_ifa(ifa) }}

/**
* Generated Proxy for  {{= ifa.name }}
*/
 {{= get_js_namespace_from_ifa(ifa) }}. {{= ifa.name }}Proxy = function(urlBase) {
    var self = this;

    // URL-Basis aufbauen
    self.url = urlBase;
{{ if ifa.is_param_present("path") { }}
    self.url += " {{= ifa.get_param_value("path") }}";  
{{ } }}
    
{{ for function in ifa.functions.iter() { }}

    /** {{ for param in function.params.iter() { }}
     * @param  {{= param.name }} {{ } }} 
     * @return  {{= function.returntype }}
     */ 
    self. {{= function.name }} = function( {{ for param in function.params.iter() { }}{{= param.name }}{{ str.push_str(", ");  } }}successHandler, errorHandler) { 
{{     if function.is_attribute_value_present("method", "GET") {
    str.push_str(&get_impl_for_get_function(&function)) 
  } else if function.is_attribute_value_present("method", "POST") {
    str.push_str(&get_impl_for_post_function(&function)) 
  } else if function.is_attribute_value_present("method", "PUT") {
    str.push_str(&get_impl_for_put_function(&function))
  } else if function.is_attribute_value_present("method", "DELETE") {
    str.push_str(&get_impl_for_delete_function(&function))
  } }}
    }
{{ } }}
}
{{   return str;
} 
}}{{+ ./jquery_template/http_get_function.ct }}{{+ ./jquery_template/http_post_function.ct }}{{+ ./jquery_template/http_put_function.ct }}{{+ ./jquery_template/http_delete_function.ct }}