{{ 
fn buildup_js_namespace_from_type(t:&model::Type) -> String {
    if t.is_param_present("js-namespace") {
        let ns = t.get_param_value("js-namespace");
        return buildup_js_namespace(&ns);
    } else {
        let mut str:String = String::new();
        str.push_str("var model = model || {};");
        return str;
    }
}

fn buildup_js_namespace_from_ifa(i:&model::Interface) -> String {
    if i.is_param_present("js-namespace") {
        let ns = i.get_param_value("js-namespace");
        return buildup_js_namespace(&ns);
    } else {
        let mut str:String = String::new();
        str.push_str("var proxy = proxy || {};");
        return str;
    }
}

fn buildup_js_namespace(s:&str) -> String {
    let mut str:String = String::new();
    let mut ns:String = String::new();
    let mut split = s.split(".");
    let mut i = 0;
    
    for token in split {        
        if i == 0 {
            ns.push_str(token);
            
            str.push_str("var ");
            str.push_str(&ns);
            str.push_str(" = ");
            str.push_str(&ns);
            str.push_str(" || {};\n");
        } else {
            ns.push_str(".");
            ns.push_str(token);
            
            str.push_str(&ns);
            str.push_str(" = ");
            str.push_str(&ns);
            str.push_str(" || {};\n");
        }
        i += 1;
    }    
    
    // str.push_str(s);
    return str;
}

fn get_js_namespace_from_type(i:&model::Type) -> String {
    let mut str:String = String::new();
    if i.is_param_present("js-namespace") {
        let ns = i.get_param_value("js-namespace");
        str.push_str(&ns);
    } else {        
        str.push_str("model");        
    }
    return str;
}

fn get_js_namespace_from_ifa(i:&model::Interface) -> String {
    let mut str:String = String::new();
    if i.is_param_present("js-namespace") {
        let ns = i.get_param_value("js-namespace");
        str.push_str(&ns);
    } else {        
        str.push_str("proxy");        
    }
    return str;
}

}}